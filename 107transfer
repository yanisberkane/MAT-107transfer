#!/usr/bin/python3

##
## EPITECH PROJECT, 2021
## B-MAT-200-PAR-2-1-106bombyx-rayan.banni
## File description:
## 106bombyx
##

import sys
from numpy import character

def my_is_digit(c : character):
    if ((ord(c) < ord('0') or ord(c) > ord('9')) and c != '-' and c != '.' and c != '*'):
        return False
    return True

def verif(argv):
    for j in range(1, len(argv)):
        for i in range(0, len(argv[j])):
            if (my_is_digit(argv[j][i]) == False):
                return False
    return True

def get_horner_img(table, x):
    p = table[0]
    for i in range (1, len(table)):
        p = table[i] + p * x
    return p

def get_polynomes_in_context(argv):
    arr = []
    nb_arr = []

    for i in range(1, len(argv)):
        arr.append(argv[i].split('*'))
        arr[i - 1].reverse()
        nb_arr.append(list(map(lambda x: float(x), arr[i - 1])))
    return nb_arr

def get_polynomes_imgs(nb_arr, x):
    polys_imgs = []
    for i in range(0, len(nb_arr)):
        p_value = get_horner_img(nb_arr[i], x)
        polys_imgs.append(p_value)
    return polys_imgs

def get_solutions(argv):
    i = 0
    temp_results = []
    x = 0

    nb_arr = get_polynomes_in_context(argv)
    while (x < 1001):
        poly_imgs = get_polynomes_imgs(nb_arr, (x * 0.001))
        len_polys = len(poly_imgs)
        temp_results.clear()
        while (i < len_polys):
            if (i + 1 >= len_polys):
                temp_results.append(poly_imgs[i])
            else:
                if (poly_imgs[i + 1] == 0):
                    exit(84)
                temp_results.append(poly_imgs[i] / poly_imgs[i + 1])
            i = i + 2
        result = temp_results[0]
        for j in range (1, len(temp_results)):
            result = result * temp_results[j]
        print(f"{(x * 0.001):.3f} -> {result:.5f}")
        x = x + 1
        i = 0

def main(argv):
    with open("help.txt", "r") as help_file:
        read = help_file.read()

    if (len(argv) == 2 and argv[1] == "-h"):
        print(read)
    elif (len(argv) < 2 or (len(argv) % 2) == 0 or verif(argv) == False):
        return 84
    else:
        get_solutions(argv)
        return 0

if __name__ == '__main__':
    exit(main(sys.argv))
